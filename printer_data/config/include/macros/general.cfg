[gcode_macro START_PRINT]
gcode:

  {% set bedTemp = params.BED|default(70)|int %}
  {% set hotendTemp = params.HOTEND|default(210)|int %}
  SET_FAN_SPEED FAN=LED_Bar SPEED=0.5
  CLEAR_PAUSE
  RESETSPEEDS
  G21 ;metric values
  G90 ;absolute positioning
  M83 ;extruder relative mode
  M140 S{bedTemp}; start heating the bed
  M104 S100 ; start heating the hotend to a nondrippy temp
  SET_DISPLAY_TEXT MSG="Waiting for temperatures..."
  G28 X Y
  G28 Z ;Home Z
    SET_DISPLAY_TEXT MSG="Adjusting Z Tilt"
  Z_TILT_ADJUST ;Adjust bed tilt
  G28 Z ;Home Z again after tilt to be sure
  SET_DISPLAY_TEXT MSG="Checking bed mesh age/requests"
  #LEVEL_BED_ADVANCED MAX_AGE=10 ; probe mesh eventually
  BED_MESH_CALIBRATE
  BED_MESH_PROFILE LOAD=default ;Load the mesh
  CARTOGRAPHER_TOUCH
  SET_DISPLAY_TEXT MSG="Heating Extruder to temp"
  G1 X1 Y1 Z0.5 F9000 ; move to start line position 
  M109 S{hotendTemp}; wait for extruder to heat up
  M83  ; extruder relative mode
  SET_DISPLAY_TEXT MSG="Begin Print"


[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro FIXED_PURGE_LINE]
gcode: 
    M83  ; extruder relative mode
    G92 E0 ;Reset Extruder
    G1 Z1 F3000 ;Move Z Axis up
    G1 X1 Y80 Z0.3 E10  F1200 ;Draw the first line
    G1 X1 Y120 E11  F1200 ;Draw the second line
    G1 E-0.8 F1000 ; retract filament
    G92 E0 ;Reset Extruder
    G1 Z1 F2000 ; Move Z up to avoid scratching surface

[gcode_macro END_PRINT]
gcode:
  TR_UNLOAD_TOOLHEAD
  
  TURN_OFF_HEATERS
  G91 ;relative positioning
  G1 Z15 E-2 F3600  ;retract the filament a bit before lifting the nozzle.
  #G1 E-3 F3600 ;retract filament even more
  G90 ;absolute positioning
  G1 X0 Y0 F7000; 
  M106 S80 ; layer cooling fan ON
  G4 P10000 ; wait 20 seconds
  M106 S0 ; Layer cooling fan off
  M221 S100 ; Reset extrusion multiplier
  CLEAR_PAUSE
  M84
  SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
  SET_FAN_SPEED FAN=LED_Bar SPEED=0
  UPDATE_GIT #Update the github with new klipper configs

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  SET_IDLE_TIMEOUT TIMEOUT=7200
  G91
  G1 E-{1} F2100
  G1 Z{10} F900
  G90
  G1 X{50} Y{0} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{1} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME
  #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  G91 ;relative positioning
  G1 Z10 E-2 F3600  ;retract the filament a bit before lifting the nozzle.
  G1 E-3 F3600 ;retract filament even more
  G90 ;absolute positioning
  G1 X30 Y250 F7000; home X axis
  M106 S80 ; layer cooling fan ON
  G4 P10000 ; wait 20 seconds
  M106 S0 ; Layer cooling fan off
  M221 S100 ; Reset extrusion multiplier
  CANCEL_PRINT_BASE
  CLEAR_PAUSE
  #PLAY_FINISH_PRINT
  SET_GCODE_OFFSET Z=0.0
  M84
  #DISABLEXYE
  BED_MESH_CLEAR

[gcode_macro PARK]
description: Park the toolhead at the front and retract some filament if the nozzle is hot
gcode:
    {% set E = params.E|default(1.7)|float %}

    {% set Px, Py = printer["gcode_macro _USER_VARIABLES"].park_position_xy|map('float') %}
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES"].park_lift_z %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set z_safe = act_z + park_lift_z %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}

    # retract filament before move up toolhead
    {% if printer.extruder.temperature > 185 %}
        G10
    {% endif %}
    G90
    G1 Z{z_safe} F{Sz}

    G0 X{Px} Y{Py} F{St}


[gcode_macro DISABLEXYE]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = 10 + bound %}
        {% set x_max = 300 - bound %}
        {% set y_min = 10 + bound %}
        {% set y_max = 300 - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{300} Y{300} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{300} Y{300} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

    ; Only-Scan-Every-X-Prints https://old.reddit.com/r/klippers/comments/qdr0g9/my_gcode_macro_to_mesh_level_the_bed_every_10th/
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}