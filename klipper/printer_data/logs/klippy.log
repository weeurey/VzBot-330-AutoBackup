=============== Log rollover at Sun Dec 10 14:52:04 2023 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-1-g74473322-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Sun Dec 10 14:52:06 2023 (1702219926.8 19.9)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 350

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 Z10 E-2 F3600
	G1 E-3 F3600
	G90
	G1 X30 Y250 F7000; home X axis
	M106 S80
	G4 P10000
	M106 S0
	M221 S100
	CANCEL_PRINT_BASE
	CLEAR_PAUSE
	
	SET_GCODE_OFFSET Z=0.0
	RESETSPEEDS
	M84
	
	BED_MESH_CLEAR

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	SET_IDLE_TIMEOUT TIMEOUT=7200
	G91
	G1 E-{1} F2100
	G1 Z{10} F900
	G90
	G1 X{50} Y{0} F6000
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	G91
	G1 E{1} F2100
	RESTORE_GCODE_STATE NAME=PAUSE_state
	BASE_RESUME

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[tmc2209 extruder]
interpolate = false
uart_pin = PE4
run_current = 0.50
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
rotation_distance = 5.7
full_steps_per_rotation = 200
sensor_type = Generic 3950
min_temp = 0
max_temp = 330
filament_diameter = 1.750
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
heater_pin = PA2
sensor_pin = PF4
microsteps = 16
nozzle_diameter = 0.600
pressure_advance = 0.015
pressure_advance_smooth_time = 0.02
max_extrude_only_distance = 101
control = pid
pid_kp = 22.354
pid_ki = 1.552
pid_kd = 80.473

[tmc2209 stepper_x]
uart_pin = PC4
diag_pin = PG6
run_current = 1.67
stealthchop_threshold = 0
sense_resistor = 0.110

[stepper_x]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
endstop_pin = PG14
microsteps = 16
rotation_distance = 40
position_endstop = -6
position_min = -6
position_max = 330
homing_speed = 20
full_steps_per_rotation = 200
homing_retract_dist = 0
homing_positive_dir = false
step_pulse_duration = 0.000001

[tmc2209 stepper_y]
uart_pin = PD11
diag_pin = PG9
run_current = 1.67
stealthchop_threshold = 0
sense_resistor = 0.110

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
endstop_pin = PG15
microsteps = 16
rotation_distance = 40
position_endstop = 0
position_min = 0
position_max = 315
homing_speed = 20
full_steps_per_rotation = 200
homing_retract_dist = 0
homing_positive_dir = false
step_pulse_duration = 0.000001

[tmc2209 stepper_x1]
uart_pin = PE1
diag_pin = PG14
run_current = 1.67
stealthchop_threshold = 0
sense_resistor = 0.110

[stepper_x1]
step_pin = PE2
dir_pin = !PE3
enable_pin = !PD4
microsteps = 16
rotation_distance = 40
full_steps_per_rotation = 200
step_pulse_duration = 0.000001

[tmc2209 stepper_y1]
uart_pin = PD3
diag_pin = PG15
run_current = 1.67
stealthchop_threshold = 0
sense_resistor = 0.110

[stepper_y1]
step_pin = PE6
dir_pin = !PA14
enable_pin = !PE0
microsteps = 16
rotation_distance = 40
full_steps_per_rotation = 200
step_pulse_duration = 0.000001

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
endstop_pin = probe:z_virtual_endstop
microsteps = 16
rotation_distance = 8
position_min = -20
position_max = 400
full_steps_per_rotation = 200
homing_retract_dist = 5.0
homing_positive_dir = false
homing_speed = 3
second_homing_speed = 1
step_pulse_duration = 0.000004

[stepper_z1]
step_pin = PG4
dir_pin = PC1
enable_pin = !PA0
endstop_pin = probe:z_virtual_endstop
microsteps = 16
rotation_distance = 8

[tmc2209 stepper_z]
uart_pin = PC6
run_current = 0.650
sense_resistor = 0.110
stealthchop_threshold = 0

[tmc2209 stepper_z1]
uart_pin = PC7
run_current = 0.650
sense_resistor = 0.110
stealthchop_threshold = 0

[temperature_sensor Octopus Pro]
sensor_type = temperature_mcu
min_temp = 10
max_temp = 100

[temperature_sensor CB1]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[fan_generic LED_Bar]
pin = PD15
max_power = 1
shutdown_speed = 0
kick_start_time = 0.1
off_below = 0.10

[heater_fan hotend_fan]
pin = PA8
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[fan]
pin = !PE5
enable_pin = PB11
hardware_pwm = True
max_power = 1
cycle_time = 0.00002
off_below = 0.012
kick_start_time = 0.01

[heater_bed]
heater_pin = PA1
sensor_pin = PF3
sensor_type = NTC 100K MGB18-104F39050L32
control = pid
pid_kp = 34.679
pid_ki = 1.492
pid_kd = 201.572
min_temp = 0
max_temp = 120
max_power = 1
pwm_cycle_time = 0.0166

[bed_screws]
screw1 = 10,0
screw2 = 10,260
screw3 = 320,260
screw4 = 320,0

[screws_tilt_adjust]
screw1 = 10, 0
screw1_name = front left screw
screw2 = 10, 260
screw2_name = rear left screw
screw3 = 300, 260
screw3_name = rear right screw
screw4 = 320, 0
screw4_name = front right screw
horizontal_move_z = 10.
speed = 250
screw_thread = CW-M3

[gcode_macro _User_Variables]
variable_verbose = False
variable_debug = False
variable_travel_speed = 50
variable_move_accel = 1000
variable_dock_speed = 50
variable_release_speed = 75
variable_z_drop_speed = 20
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 0
variable_z_endstop_y = 0
variable_docklocation_x = 77
variable_docklocation_y = 305
variable_docklocation_z = -128
variable_enable_dock_servo = True
variable_servo_name = 'qd_servo'
variable_servo_deploy = 25
variable_servo_retract = 120
variable_servo_delay = 250
variable_dockmove_x = 35
variable_dockmove_y = 0
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 25
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = True
variable_parkposition_x = 145
variable_parkposition_y = 125
variable_parkposition_z = 15
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
variable_home_backoff_x = 10
variable_home_backoff_y = 10
variable_override_homing = ''
variable_dock_on_zhome = True
variable_bypass_probe_docking = False
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	
	
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	
	
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _KlickyDebug]
gcode = 
	{% set message  = params.MSG %}
	{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}
	
	{% if debug %}
	{ action_respond_info(message) }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}
	
	
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	
	M400
	SAVE_GCODE_STATE NAME={function}
	
	SET_GCODE_OFFSET Z=0
	
	G90
	
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _DeployKlickyDock]
description = Deploys Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"
	{% if servo_deploy == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
	{% endif %}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _DeployDock"] is defined %}
	_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"
	_DeployDock
	{% endif %}

[gcode_macro _RetractKlickyDock]
description = Retracts Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"
	{% if servo_retract == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
	{% endif %}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _RetractDock"] is defined %}
	_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"
	_RetractDock
	{% endif %}

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	_entry_point function=Attach_Probe
	
	{% if bypass_probe_docking == False %}
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	_KlickyDebug msg="Attach_Probe Axis homed"
	
	
	{% elif not probe_attached and not probe_lock %}
	_KlickyDebug msg="Attach_Probe going to attach probe"
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	_KlickyDebug msg="Attach_Probe z_hop disabled"
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero, duplicate?") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	_entry_point function=Attach_Probe_intern
	
	
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	_CheckProbe action=attach
	
	_exit_point function=Attach_Probe_intern move={goback}
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe locked not attaching probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Attach_Probe
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	{% if bypass_probe_docking == False %}
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}
	
	
	{% if bypass_probe_docking == False %}
	_entry_point function=Dock_Probe
	
	
	{% if probe_attached and not probe_lock %}
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% endif %}
	_KlickyDebug msg="Dock_Probe Axis homed"
	_KlickyDebug msg="Dock_Probe going to dock probe"
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	G4 P1000
	_CheckProbe action=dock
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe locked not docking probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Dock_Probe move={goback}
	{% else %}
	_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_calibrate Axis homed"
	_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
	{% endif %}
	
	{% if bypass_probe_docking == False %}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_KLICKY_STATUS_CALIBRATING_Z
	
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	M118 moving the toolhead 20 mm from the bed
	_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"
	TESTZ Z=20
	M118 remove manually the probe and continue calibration
	_KLICKY_STATUS_READY
	{% else %}
	_KLICKY_STATUS_CALIBRATING_Z
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	_KLICKY_STATUS_READY
	{% endif %}

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_accuracy Axis homed"
	_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	_entry_point function=PROBE_ACCURACY
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
	{% endif%}
	
	_CheckProbe action=query
	Attach_Probe back=1
	
	_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe back=1
	
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set kinematic_z = 0 %}
	{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}
	{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}
	{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}
	
	
	_klicky_check_variables_version
	
	_CheckProbe action=query
	
	
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	
	
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	
	{% set home_x, home_y, home_z = True, True, True %}
	_KlickyDebug msg="homing_override goint to home all axes"
	
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	_KlickyDebug msg="homing_override goint to home X"
	
	{% endif %}
	
	{% if 'Y' in params %}
	{% set home_y = True %}
	_KlickyDebug msg="homing_override goint to home Y"
	{% endif %}
	
	{% if 'Z' in params %}
	{% set home_z = True %}
	_KlickyDebug msg="homing_override goint to home Z"
	{% endif %}
	
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	
	
	_Homing_Variables reset=1
	_KlickyDebug msg="homing_override goint to home all axes"
	{% endif %}
	
	{% endif %}
	
	_entry_point function=homing_override
	_KLICKY_STATUS_HOMING
	
	
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	_KlickyDebug msg="homing_override z_hop disabled"
	
	{% set kinematic_z = safe_z %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("No axis homed") }
	{% endif %}
	_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
	SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
	M400
	_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	_KlickyDebug msg="homing_override clearing axis homed state"
	M84
	{% endif %}
	
	{% if home_z %}
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("X or Y not homed, forcing full G28") }
	{% endif %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	
	
	{% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
	
	{% if home_y %}
	{% if override_homing == 'Y' %}
	_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"
	{% else %}
	_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"
	{% endif %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y G28 Y0"
	G28 Y0
	
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	
	
	
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"
	_HOME_X
	{% else %}
	_KlickyDebug msg="homing_override Homing X, G28 X0"
	G28 X0
	
	{% if home_backoff_x != 0 %}
	{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y, G28 Y0"
	G28 Y0
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"
	Attach_Probe
	
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% elif dock_on_zhome == True %}
	Dock_Probe
	{% endif %}
	
	_Home_Z
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe no longer required, docking probe"
	Dock_Probe
	{% elif dock_on_zhome == False %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	
	
	_Park_Toolhead
	
	_exit_point function=homing_override
	_KLICKY_STATUS_READY

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	
	{% if umbilical %}
	
	_entry_point function=Umbilical_Path
	
	_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Home_Z
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	_KlickyDebug msg="_Home_Z XY Axis homed"
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="_Home_Z Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	
	
	_KlickyDebug msg="_Home_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	_KlickyDebug msg="_Home_Z Homing Z G28 Z"
	G28 Z0
	_KlickyDebug msg="_Home_Z toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	
	
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	
	
	
	
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	
	
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Park_Toolhead
	
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	{% if parkposition_z == -128 %}
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}
	
	{% else %}
	
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	
	{% endif %}
	
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro _klicky_status_ready]
gcode = 
	{% if printer['gcode_macro status_ready'] is defined %}
	_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
	STATUS_READY
	{% endif %}

[gcode_macro _klicky_status_busy]
gcode = 
	{% if printer['gcode_macro status_busy'] is defined %}
	_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
	STATUS_BUSY
	{% endif %}

[gcode_macro _klicky_status_leveling]
gcode = 
	{% if printer['gcode_macro status_leveling'] is defined %}
	_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
	STATUS_LEVELING
	{% endif %}

[gcode_macro _klicky_status_homing]
gcode = 
	{% if printer['gcode_macro status_homing'] is defined %}
	_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
	STATUS_HOMING
	{% endif %}

[gcode_macro _klicky_status_cleaning]
gcode = 
	{% if printer['gcode_macro status_cleaning'] is defined %}
	_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
	STATUS_CLEANING
	{% endif %}

[gcode_macro _klicky_status_meshing]
gcode = 
	{% if printer['gcode_macro status_meshing'] is defined %}
	_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
	STATUS_MESHING
	{% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode = 
	{% if printer['gcode_macro status_calibrating_z'] is defined %}
	_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
	STATUS_CALIBRATING_Z
	{% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
description = Perform Mesh Bed Leveling with klicky automount
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing = _SCREWS_TILT_CALCULATE
description = 
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Screws Tilt Adjust") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_LEVELING
	
	_SCREWS_TILT_CALCULATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
description = 
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_LEVELING
	
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0

[gcode_macro _Probe_Dock_Servo_Variables]
variable_servo_name = 'probe_dock_servo'
variable_servo_extended_angle = 95
variable_servo_retracted_angle = 180
gcode = 

[gcode_macro find_docklocation_z]
gcode = 
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_feedrate|default(1000) %}
	extend_probe_dock
	CALIBRATE_DOCKLOCATION_Z X={docklocation_x} Y={docklocation_y}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	{ action_respond_info("find_sdocklocation_z: " + printer.calibrate_docklocation_z.docklocation_z|string) }

[gcode_macro set_docklocation_z]
gcode = 
	SET_GCODE_VARIABLE MACRO=_User_Variables VARIABLE=docklocation_z VALUE={printer.calibrate_docklocation_z.docklocation_z}
	{ action_respond_info("set_docklocation_z: " + printer.calibrate_docklocation_z.docklocation_z|string) }

[gcode_macro auto_set_docklocation_z]
gcode = 
	find_docklocation_z
	set_docklocation_z

[gcode_macro read_docklocation_z]
gcode = 
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{ action_respond_info("current docklocation_z: " + docklocation_z|string) }

[gcode_macro extend_probe_dock]
description = Extend Klicky Probe Dock
gcode = 
	
	{% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
	
	{% set initial_angle = printer['configfile'].config["servo " + servo_name]['initial_angle']|int %}
	
	{% if 'servo_extended_angle' in printer["gcode_macro _Probe_Dock_Servo_Variables"] %}
	{% set SEA = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_extended_angle | int %}
	{% else %}
	{% set SEA = initial_angle + 180 %}
	{% endif %}
	
	{ action_respond_info("Extending Probe Dock: Angle = " + SEA|string) }
	SET_SERVO SERVO={servo_name} ANGLE={SEA}
	M400

[gcode_macro retract_probe_dock]
description = Retract Klicky Probe Dock
gcode = 
	
	{% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
	
	{% set initial_angle = printer['configfile'].config["servo " + servo_name]['initial_angle']|int %}
	
	{% if 'servo_retracted_angle' in printer["gcode_macro _Probe_Dock_Servo_Variables"] %}
	{% set SRA = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_retracted_angle | int %}
	{% else %}
	{% set SRA = initial_angle %}
	{% endif %}
	
	{ action_respond_info("Retracting Probe Dock: Angle = " + SRA|string) }
	SET_SERVO SERVO={servo_name} ANGLE={SRA}
	M400

[gcode_macro vibrate_brush]
description = [COUNT=xxx] (default is 30 times)
gcode = 
	{% set count = params.COUNT|default(20)|int %}
	{% set servo_name = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_name|default('probe_dock_servo') %}
	{% set servo_extended_angle = printer["gcode_macro _Probe_Dock_Servo_Variables"].servo_extended_angle | int %}
	{% set initial_brush_angle = servo_extended_angle - 5 | int %}
	{% for iters in range(1, count) %}
	{% set brush_angle = initial_brush_angle + 20 * (iters % 2) | int %}
	SET_SERVO SERVO={servo_name} ANGLE={brush_angle}
	{% endfor %}

[gcode_macro servo_stress_test]
description = [COUNT=xxx] (default is 10 times)
gcode = 
	{% set count = params.COUNT|default(10)|int %}
	{% for iters in range(1, count) %}
	extend_probe_dock
	retract_probe_dock
	{% endfor %}

[gcode_macro docking_stress_test]
description = [COUNT=xxx] (default is 10 times)
variable_prep_spd_xy = 3600
gcode = 
	{% set count = params.COUNT|default(10)|int %}
	{% set Bx = printer.configfile.config["stepper_x"]["position_endstop"]|float %}
	{% set By = printer.configfile.config["stepper_y"]["position_endstop"]|float %}
	
	{% for iters in range(1, count) %}
	dock_probe
	
	{% set x_pos = range(0, Bx|int)|random| int %}
	{% set y_pos = range(0, By|int)|random| int %}
	G0 X{x_pos} Y{x_pos} F{prep_spd_xy}
	
	attach_probe
	
	{% set x_pos = range(0, Bx|int)|random| int %}
	{% set y_pos = range(0, By|int)|random| int %}
	G0 X{x_pos} Y{x_pos} F{prep_spd_xy}
	{% endfor %}

[gcode_macro clean_nozzle]
variable_brush_top = 25
variable_nozzle_dip = 2
variable_brush_start = 0
variable_brush_width = 52
variable_brush_front = 340
variable_brush_depth = 10
variable_clearance_z = 5
variable_prep_spd_xy = 3000
variable_prep_spd_z = 1500
variable_wipe_spd_xy = 1000
variable_brush_cycles = 26
gcode = 
	
	{% if "xyz" in printer.toolhead.homed_axes %}
	
	
	SAVE_GCODE_STATE NAME=clean_nozzle
	
	
	G90
	
	
	{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
	
	
	{% set By = printer.configfile.config["stepper_y"]["position_endstop"]|float %}
	
	
	extend_probe_dock
	
	
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	G1 X{brush_start} F{prep_spd_xy}
	
	G1 Y{brush_front + (brush_depth / 2)}
	
	
	{% set nozzle_height = brush_top - nozzle_dip %}
	{% if nozzle_height < 0 %}
	{% set nozzle_height = brush_top %}
	{% endif %}
	G1 Z{nozzle_height} F{prep_spd_z}
	
	
	vibrate_brush count={brush_cycles}
	
	G1 X{brush_start + brush_width} F{wipe_spd_xy}
	
	
	
	retract_probe_dock
	
	
	M117 Cleaned!
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	
	
	
	
	
	G1 X{brush_start} Y{By} F{prep_spd_xy}
	
	
	RESTORE_GCODE_STATE NAME=clean_nozzle
	
	{% else %}
	
	
	{ action_raise_error("Please home your axes!") }
	M117 Please home first!
	
	{% endif %}

[servo qd_servo]
pin = PB6
maximum_servo_angle = 200
minimum_pulse_width = 0.00025
maximum_pulse_width = 0.0024
initial_angle = 120

[bed_mesh]
speed = 350
horizontal_move_z = 15
mesh_min = 10, 30
mesh_max = 310, 290
mesh_pps = 3,3
probe_count = 10,10
algorithm = bicubic
relative_reference_index = 12
bicubic_tension = 0.2
fade_start = 1
fade_end = 10
split_delta_z = .025
move_check_distance = 5

[gcode_macro BED_MESH]
gcode = 
	BED_MESH_CALIBRATE

[gcode_macro PA_TUNING]
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro HOTEND_PID]
gcode = 
	{% set tool_temp = params.TEMPERATURE|default(220)|int %}
	{% set tool_name = printer.toolhead.extruder %}
	PID_CALIBRATE HEATER={tool_name} TARGET={tool_temp}

[gcode_macro BED_PID]
gcode = 
	{% set bed_temp = params.TEMPERATURE|default(60)|int %}
	PID_CALIBRATE HEATER=heater_bed TARGET={bed_temp}

[gcode_macro SCREWS_TILT]
gcode = 
	SCREWS_TILT_CALCULATE

[gcode_macro DUMP_WARNINGS]
description = Debug: Print all warning messages from klipper
gcode = 
	{% set parameters = ["printer.configfile.warnings:"] %}
	{% for warning in printer.configfile.warnings %}
	{% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
	{% endfor %}
	{action_respond_info(parameters|join("\n"))}

[gcode_macro enable_stepper]
gcode = 
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
	SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
	SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro disable-steppers]
gcode = 
	m84

[gcode_macro M600]
gcode = 
	G4 P1500
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	
	G91
	G1 E-{1} F2100
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F4000
	G91
	M83
	G1 E5 F800
	G1 E-180 F2000
	M82
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PURGE]
gcode = 
	M83
	G1 E120 F250

[gcode_macro _UNLOAD_FILAMENT]
gcode = 
	{% set e_temp = params.TEMPERATURE|default(235)|int %}
	M118 Filament unloading!
	M117 Filament unloading!
	M82
	G92 E0
	{% if printer.extruder.can_extrude|lower != 'true' %}
	
	M118 Hotend heating!
	M109 S{e_temp} T0
	{% endif %}
	G1 E10 F{5*60}
	G0 E-5 F{60*60}
	G0 E-70 F{5*60}
	M400
	M118 Filament unload complete!
	M117 Filament unload complete!

[gcode_macro _LOAD_FILAMENT]
gcode = 
	{% set e_temp = params.TEMPERATURE|default(230)|int %}
	M109 S{e_temp}
	M83
	G1 E50 F300
	G1 E-1 F100
	M82
	M104 S0

[gcode_macro UNLOAD_PLA]
gcode = 
	_UNLOAD_FILAMENT TEMPERATURE=200

[gcode_macro LOAD_PLA]
gcode = 
	_LOAD_FILAMENT TEMPERATURE=200

[gcode_macro UNLOAD_ABS]
gcode = 
	_UNLOAD_FILAMENT TEMPERATURE=250

[gcode_macro LOAD_ABS]
gcode = 
	_LOAD_FILAMENT TEMPERATURE=250

[gcode_macro UNLOAD_PETG]
gcode = 
	_UNLOAD_FILAMENT TEMPERATURE=235

[gcode_macro LOAD_PETG]
gcode = 
	_LOAD_FILAMENT TEMPERATURE=235

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=load_state
	M300
	G91
	G92 E0
	G1 E350 F{max_velocity}
	G1 E25 F{speed}
	M300
	M300
	RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=unload_state
	G91
	M300
	G92 E0
	G1 E25 F{speed}
	G1 E-420 F{max_velocity}
	M300
	M300
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro START_PRINT]
gcode = 
	
	{% set DWELL = params.DWELL|default(00)|int %}
	{% set bedTemp = params.BED|default(100)|int %}
	{% set hotendTemp = params.HOTEND|default(250)|int %}
	
	
	
	
	SET_FAN_SPEED FAN=LED_Bar SPEED=0.5
	CLEAR_PAUSE
	RESETSPEEDS
	G21
	G90
	M83
	M140 S{bedTemp}; start heating the bed
	M104 S100
	SET_DISPLAY_TEXT MSG="Waiting for temperatures..."
	HEATSOAK DWELL={DWELL}
	G28 X Y
	ATTACH_PROBE_LOCK
	G28 Z
	SET_DISPLAY_TEXT MSG="Adjusting Z Tilt"
	Z_TILT_ADJUST
	
	SET_DISPLAY_TEXT MSG="Calibrating Bed Mesh"
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE
	BED_MESH_PROFILE LOAD=default
	DOCK_PROBE_UNLOCK
	SET_DISPLAY_TEXT MSG="Heating Extruder to temp"
	M109 S190; wait for extruder to heat up
	G1 X1 Y1 Z0.5 F9000
	M109 S{hotendTemp}; wait for extruder to heat up
	
	
	
	FIXED_PURGE_LINE
	M83
	SET_DISPLAY_TEXT MSG="Printing..."

[gcode_macro HEATSOAK]
gcode = 
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion..."
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 5% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 10% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 15% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 20% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 25% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 30% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 35% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 40% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 45% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 50% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 55% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 60% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 65% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 70% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 75% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 80% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 85% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 90% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Waiting for thermal expansion 95% done"
	G4 P{params.DWELL|int*1000/20}
	SET_DISPLAY_TEXT MSG="Thermal expansion done"

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro FIXED_PURGE_LINE]
gcode = 
	M83
	G92 E0
	G1 Z1 F3000
	G1 X1 Y80 Z0.3 E10  F1200
	G1 X1 Y120 E11  F1200
	G1 E-0.8 F1000
	G92 E0
	G1 Z1 F2000

[gcode_macro END_PRINT]
gcode = 
	TURN_OFF_HEATERS
	G91
	G1 Z10 E-2 F3600
	
	G90
	G1 X30 Y250 F7000; home X axis
	M106 S80
	G4 P10000
	M106 S0
	M221 S100
	CLEAR_PAUSE
	
	SET_GCODE_OFFSET Z=0.0
	RESETSPEEDS
	
	M84
	BED_MESH_CLEAR
	SET_FAN_SPEED FAN=LED_Bar SPEED=0
	UPDATE_GIT

[gcode_macro PARK]
description = Park the toolhead at the front and retract some filament if the nozzle is hot
gcode = 
	{% set E = params.E|default(1.7)|float %}
	
	{% set Px, Py = printer["gcode_macro _USER_VARIABLES"].park_position_xy|map('float') %}
	{% set park_lift_z = printer["gcode_macro _USER_VARIABLES"].park_lift_z %}
	
	{% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
	{% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	
	{% set z_safe = act_z + park_lift_z %}
	{% if z_safe > max_z %}
	{% set z_safe = max_z %}
	{% endif %}
	
	
	{% if printer.extruder.temperature > 185 %}
	G10
	{% endif %}
	G90
	G1 Z{z_safe} F{Sz}
	
	G0 X{Px} Y{Py} F{St}

[gcode_macro RESETSPEEDS]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

[gcode_macro DISABLEXYE]
gcode = 
	SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
	
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
	
	SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = 10 + bound %}
	{% set x_max = 300 - bound %}
	{% set y_min = 10 + bound %}
	{% set y_max = 300 - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{300} Y{300} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{300} Y{300} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = True
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[z_tilt]
z_positions = 
	-80,  -20
	350, -20
points = 
	15, 150
	275, 150
speed = 50
horizontal_move_z = 15
retries = 30
retry_tolerance = 0.080

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 120.6
shaper_type_y = zv
shaper_freq_y = 76.6

[printer]
kinematics = corexy
max_velocity = 1000
max_accel = 20000
max_z_velocity = 20
max_z_accel = 300
square_corner_velocity = 10

[exclude_object]

[gcode_arcs]
resolution = 0.05

[idle_timeout]
timeout = 3000

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00

[probe]
pin = PG10
x_offset = -2
y_offset = 20
speed = 5
samples = 1
sample_retract_dist = 3
lift_speed = 40
samples_result = median
samples_tolerance = 5.0
samples_tolerance_retries = 5
z_offset = 8.100

[bed_mesh default]
version = 1
points = 
	-0.323600, -0.263600, -0.203600, -0.126100, -0.068600, -0.013600, 0.011400, 0.053900, 0.043900, 0.106400
	-0.323600, -0.258600, -0.191100, -0.126100, -0.058600, -0.021100, -0.013600, 0.001400, 0.033900, 0.063900
	-0.343600, -0.283600, -0.218600, -0.171100, -0.096100, -0.073600, -0.088600, -0.091100, -0.096100, -0.071100
	-0.326100, -0.278600, -0.238600, -0.181100, -0.156100, -0.126100, -0.136100, -0.141100, -0.148600, -0.121100
	-0.343600, -0.306100, -0.281100, -0.228600, -0.201100, -0.173600, -0.188600, -0.218600, -0.243600, -0.231100
	-0.321100, -0.308600, -0.283600, -0.263600, -0.246100, -0.233600, -0.258600, -0.283600, -0.328600, -0.346100
	-0.346100, -0.348600, -0.343600, -0.326100, -0.311100, -0.301100, -0.351100, -0.426100, -0.451100, -0.451100
	-0.388600, -0.396100, -0.406100, -0.408600, -0.406100, -0.433600, -0.468600, -0.523600, -0.566100, -0.593600
	-0.463600, -0.468600, -0.483600, -0.496100, -0.506100, -0.533600, -0.581100, -0.666100, -0.708600, -0.738600
x_count = 10
y_count = 9
mesh_x_pps = 3
mesh_y_pps = 3
algo = bicubic
tension = 0.2
min_x = 10.24
max_x = 309.95
min_y = 30.0
max_y = 256.48
=======================
Extruder max_extrude_ratio=0.598682
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00'
webhooks client 140734496167952: New connection
webhooks client 140734496167952: Client info {'program': 'Moonraker', 'version': 'v0.8.0-202-gdddd968'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_2F0018001750344D30353320-if00'
